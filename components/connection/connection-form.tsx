"use client"
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/i0caqiAiOZb
 */
import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  CardFooter,
  Card,
} from "@/components/ui/card"
import {
  Select,
  SelectTrigger,
  SelectGroup,
  SelectContent,
  SelectValue,
  SelectItem,
} from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Checkbox } from "@/components/ui/checkbox"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormField,
  FormItem,
  FormControl,
  FormDescription,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { toast } from "@/components/ui/use-toast"

import { saveAction, getAction } from "@/app/actions"
import Link from "next/link"
import { useRouter } from 'next/navigation'

import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { useFormStatus, useFormState } from "react-dom"
import { useForm } from "react-hook-form"

import type { InferGetStaticPropsType, GetStaticProps } from 'next'

export const getStaticProps = (async (context: any) => {
  console.log('context in getStaticProps', context)
  const connection = await getAction(1)
  console.log('connection', connection)
  return { props: { connection } }
}) 
// satisfies GetStaticProps<{
//   score: number
// }>

const saveSchema = z.object({
  // url: z.string().optional(),
  type: z.enum(["ftp", "ftps", "http"]),
  name: z.string().optional(),
  host: z
    .string()
    .includes(".")
    .min(3, { message: "host must be a valid IP address or hostname" }),
  username: z.string().optional(),
  password: z.string().optional(),
  port: z.coerce.number().nonnegative().optional(),
  secure: z.coerce.boolean().optional(),
})

const initialState = {
  type: undefined,
  message: null,
}

export function ConnectionForm(connection: InferGetStaticPropsType<typeof getStaticProps>) {
  console.log('connection in ConnectionForm', connection)

  // if (score) {
  //   const data = 
  // }

  const form = useForm<z.infer<typeof saveSchema>>({
    resolver: zodResolver(saveSchema),
    defaultValues: {
      // url: "",
      type: "ftp",
      name: "",
      host: "",
      username: "",
      password: "",
      port: 21,
      secure: false,
    },
  })

  const { pending } = useFormStatus()
  const [state, formAction] = useFormState(saveAction, initialState)

  const router = useRouter()

  function onSubmit(values: z.infer<typeof saveSchema>) {
    console.log("sumbit values:", values)

    console.log("state", state)
    formAction(values)

    form.reset()
    router.push("/connections")

    toast({
      description: state.errors ? JSON.stringify(state.errors) : state.message,
    })
  }

  return (
    <Form {...form}>
      <form
        className="w-full max-w-md text-base-content space-y-4"
        onSubmit={form.handleSubmit(onSubmit)}
      >
        {/* <FormField
          control={form.control}
          name="url"
          disabled
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Parse URL
                <FormDescription>
                  parse a URL to fill in the form
                </FormDescription>
              </FormLabel>

              <FormControl>
                <Input placeholder="ftp://user:pass@host:port e.g. ftp://elmo:sesame@localhost:21" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        /> */}

        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Type
                <FormDescription>Type of connection</FormDescription>
              </FormLabel>

              <Select defaultValue={field.value} onValueChange={field.onChange}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="ftp">FTP</SelectItem>
                    <SelectItem disabled value="ftps">
                      FTPS
                    </SelectItem>
                    <SelectItem disabled value="http">
                      HTTP
                    </SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Name
                <FormDescription>
                  name to display for connection
                </FormDescription>
              </FormLabel>

              <FormControl>
                <Input type="text" placeholder="Anime FTP" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="host"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Host (required)
                <FormDescription>
                  hostname or IP address of the server
                </FormDescription>
              </FormLabel>

              <FormControl>
                <Input required type="text" placeholder="ftp.example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Username
                <FormDescription>
                  username used to connect to the server
                </FormDescription>
              </FormLabel>

              <FormControl>
                <Input type="text" placeholder="charles_xavier" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Password
                <FormDescription>
                  password used to connect to the server
                </FormDescription>
              </FormLabel>
              <FormControl>
                <Input type="text" placeholder="x-men1963" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="port"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="leading-normal">
                Port
                <FormDescription>
                  port used to connect to the server
                </FormDescription>
              </FormLabel>
              <FormControl>
                <Input type="number" placeholder="port" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="secure"
          render={({ field }) => (
            <FormItem className="flex flex-row item-start space-x-3 space-y-0">
              <FormControl>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                  className="mt-2 w-5 h-5 border-primary"
                />
              </FormControl>

              <FormLabel className="leading-normal">
                Secure
                <FormDescription>enable FTPS / FTPES</FormDescription>
              </FormLabel>

              <FormMessage />
            </FormItem>
          )}
        />

        <div className="my-4 px-0 flex justify-between">
          <div className="flex space-x-2">
            <Link href="/connections">
              <Button variant="outline">Back</Button>
            </Link>
            <Button
              type="submit"
              className="mr-2"
              variant="outline"
              aria-disabled={pending}
            >
              Save without connecting
            </Button>
          </div>
          <Button
            type="submit"
            className="bg-primary text-primary-content"
            aria-disabled={pending}
          >
            Save and Connect
          </Button>
          <p aria-live="polite" className="sr-only" role="status">
            {state?.message}
          </p>
        </div>
      </form>
    </Form>
  )
}
